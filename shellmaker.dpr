{
 Shell Maker is an open source Delphi project, this was made to help
  programmer making their own shell like shellcode from binary to easily
  embed them inside an application, it offers a several shell formats like :
  * python, java, c... or Delphi.

 - Open source and Console application easy to compile and no external component necessary to do the compilation.
 - It can do Job for Python and java or C and Delphi.
 - Easy to use and ability to save your generated shell into a file.
 - Freeware.

 Made by Http://www.Hs32-Idir.tk
}

program shellmaker;

{$APPTYPE CONSOLE}

uses windows,UnitHsIdir,Sysutils;

function PythonShell(str:string; range:integer):string;
var
  i,p,e:integer;
  tst,ex,px,pt:string;
begin
  e := 0;
  for i := 1 to length(str) do
  begin
    tst := copyex(str,1,1);
    delete(str,1,1);
    if trim(tst) <> '' then ex := ex + tst;
  end;
  for p := 1 to length(ex) do
  begin
    if trim(copyex(ex,1,2)) <> '' then
    begin
      px := px + '\x' + copyex(ex ,1, 2);
      delete(ex,1,2);
      e := e + 1;
      if e = range then
      begin
        px := px + '''' + ' + \' + #13#10 + '''';
        e := 0;
      end;
    end;
  end;
  pt :=
    '#Win32/Hs-Idir[V-P] Shell' + #13#10
  + '#Generated by Hs32-Idir' + #13#10
  + '#Contact : http://www.Hs32-Idir.tk' + #13#10 + #13#10
  + 'HsIdirShellCode = \'
  + #13#10
  + '''' +  Copyex(trim(px), 0, length(trim(px))) + '''' +  #13#10;
  result := pt;
end;

function JavaShell(str:string; range:integer):string;
var
  i,p,e,c:integer;
  tst,ex,px,pt:string;
begin
  e := 0;
  c := 1;
  for i := 1 to length(str) do
  begin
    tst := copyex(str,1,1);
    delete(str,1,1);
    if trim(tst) <> '' then ex := ex + tst;
  end;
  for p := 1 to length(ex) do
  begin
    if trim(copyex(ex,1,2)) <> '' then
    begin
      px := px + ' 0x' + copyex(ex ,1, 2) + ',';
      delete(ex,1,2);
      e := e + 1;
      if e = range then
      begin
        px := px + #13#10;
        e := 0;
      end;
      c := c + 1;
    end;
  end;
  pt :=
    '//Win32/Hs-Idir[V-P] Shell' + #13#10
  + '//Generated by Hs32-Idir' + #13#10
  + '//Contact : http://www.Hs32-Idir.tk' + #13#10 + #13#10
  + '  char HsIdirShellCode['
  + IntToStr(c-1)
  + '] = '
  + #13#10
  + '{' + #13#10 + ' ' +  Copyex(trim(px), 0, length(trim(px))-1) + #13#10 + '};';
  result := pt;
end;

function CShell(str:string; range:integer):string;
var
  i,p,e,c:integer;
  tst,ex,px,pt:string;
begin
  e := 0;
  c := 1;
  for i := 1 to length(str) do
  begin
    tst := copyex(str,1,1);
    delete(str,1,1);
    if trim(tst) <> '' then ex := ex + tst;
  end;
  for p := 1 to length(ex) do
  begin
    if trim(copyex(ex,1,2)) <> '' then
    begin
      px := px + ' 0x' + copyex(ex ,1, 2) + ',';
      delete(ex,1,2);
      e := e + 1;
      if e = range then
      begin
        px := px + #13#10;
        e := 0;
      end;
      c := c + 1;
    end;
  end;
  pt :=
    '//Win32/Hs-Idir[V-P] Shell' + #13#10
  + '//Generated by Hs32-Idir' + #13#10
  + '//Contact : http://www.Hs32-Idir.tk' + #13#10 + #13#10
  + '  unsigned char HsIdirShellCode['
  + IntToStr(c-1)
  + '] = '
  + #13#10
  + '{' + #13#10 + ' ' +  Copyex(trim(px), 0, length(trim(px))-1) + #13#10 + '};';
  result := pt;
end;

function DelphiArray(str:string; range:integer):string;
var
  i,p,e,c:integer;
  tst,ex,px,pt:string;
begin
  e := 0;
  c := 1;
  for i := 1 to length(str) do
  begin
    tst := copyex(str,1,1);
    delete(str,1,1);
    if trim(tst) <> '' then ex := ex + tst;
  end;
  for p := 1 to length(ex) do
  begin
    if trim(copyex(ex,1,2)) <> '' then
    begin
      px := px + ' $' + copyex(ex ,1, 2) + ',';
      delete(ex,1,2);
      e := e + 1;
      if e = range then
      begin
        px := px + #13#10;
        e := 0;
      end;
      c := c + 1;
    end;
  end;
  pt :=
    '{'+#13#10+' Win32/Hs-Idir[V-P] Shell' + #13#10
  + ' Generated by Hs32-Idir' + #13#10
  + ' Contact : http://www.Hs32-Idir.tk' + #13#10 +'}'+ #13#10 + #13#10
  + 'const' + #13#10
  + '  pbuffer : Array[0..'
  + IntToStr(c-2)
  + '] of Byte = '
  + #13#10
  + '(' + Copyex(trim(px), 0, length(trim(px))-1) + ');';
  result := pt;
end;

function doJob(const cmd:Integer; mstr:string; range:integer):String;
var
  ostr:string;
begin
  case cmd of
   0 : ostr := DelphiArray(mstr,range);
   1 : ostr := PythonShell(mstr,range);
   2 : ostr := CShell(mstr,range);
   3 : ostr := JavaShell(mstr,range);
  end;
  result :=  ostr;
end;

function Command(cmd:integer):String;
begin
  Result := 'Uncknown';
  case cmd of
   0 : Result := 'Delphi Array';
   1 : Result := 'Python Shell';
   2 : Result := 'C Shell';
   3 : Result := 'Java Shell';
  end;
end;

function DoHexMaker(const source:string; range,dwCmd:integer; var szArray:String):boolean;
var
  h,o:thandle;
  rbyte,wbyte:dword;
  arr:array[1..1] of byte;
  sz,es,er:integer;
  str,lBuffer:string;
begin
  result := false;
  er := 0;
  es := 0;
  h := createfile(pchar(source) , generic_read,file_share_read,nil,open_existing,file_attribute_normal,0);
  if h <> invalid_handle_value then
  begin
    sz := getfilesize(h , nil);
   repeat
     fillchar(arr, sizeof(arr) , 0);
     readfile(h , arr , sizeof(arr) , rbyte , nil);
     str := str + IntToHex(arr[1] , 2) + ' ';
     es := es + sizeof(arr);
     er := er + sizeof(arr);
     if er = range then
      begin
        str := str + #13#10;
        er := 0;
      end;
   until es >= sz;
    Closehandle(h);
  end;
  szArray := doJob(dwCmd,Str, range);
end;

function SaveBuffer(szfilename,szbuffer:string; dwlength:integer):Boolean;
var
  h:Thandle;
  dwBytes:DWORD;
begin
  h := CreateFile(PChar(szfilename),GENERIC_WRITE,FILE_SHARE_WRITE ,nil,CREATE_NEW,FILE_ATTRIBUTE_NORMAL, 0 );
  if h <> invalid_handle_value then
  WriteFile(h, Pointer(szbuffer)^ , dwLength, dwBytes, nil);
  closehandle(h);
end;

var
  Cmd,dwRange:Integer;
  szInputFileName,szOutPutFileName,szArrayText : String;
begin
  if ParamCount > 0 then
  begin 
    if (ParamStr(1) = '/c') or (ParamStr(1) = '/C') then
    begin
      Writeln('Welcom to shell Generator, http://www.Hs32-Idir.Tk');
      szInputFileName  := ParamStr(2);
      Writeln('Input file name is : ' + szInputFileName);
      szOutPutFileName := ParamStr(3);
      Writeln('OutPut file name Is : ' + szOutPutFileName);
      Cmd := StrToInt(ParamStr(4));
      Writeln('Command is : ' + ParamStr(4) + ' that equals to : ' + Command(Cmd) );
      dwRange := StrToInt(ParamStr(5));
      Writeln('Shell range is : ' + ParamStr(5));
      Writeln('Starting Job please wait ...');
      DoHexMaker(szInputFileName, dwRange,Cmd, szArrayText);
      Writeln('Job done, saving the output file ...');
      SaveBuffer(szOutPutFileName,szArrayText, Length(szArrayText) );
      Writeln('File Saved !, please press enter to close');
      Readln;
    end;
  end
 else
  if (ParamStr(1) = '/h') or (ParamStr(1) = '/H') then
  begin
    Writeln('Welcom to shell Generator, http://www.Hs32-Idir.Tk');
    WriteLn('');

    WriteLn('Usage : ShellMaker /c inputBin.Exe outputShell.Txt 0 15');
    WriteLn('');
    WriteLn('* /c the command to do job');
    WriteLn('* inputBin.Exe input file name to convert into shell');
    WriteLn('* outputShell.Txt output file name to be saved that contain our shell');
    WriteLn('* 0 Is command parameter to do job for delphi, there is the list : ');
    WriteLn('  - 0 : do job for delphi');
    WriteLn('  - 1 : do job for python');
    WriteLn('  - 2 : do job for C');
    WriteLn('  - 3 : do job for java');
    WriteLn('* 15 is the shell range you can do whatever you want');
    WriteLn('To show this help please use command /h');
    Readln;
  end
 else
  begin
    Writeln('Welcom to shell Generator, http://www.Hs32-Idir.Tk');
    WriteLn('');

    WriteLn('Usage : ShellMaker /c inputBin.Exe outputShell.Txt 0 15');
    WriteLn('');
    WriteLn('* /c the command to do job');
    WriteLn('* inputBin.Exe input file name to convert into shell');
    WriteLn('* outputShell.Txt output file name to be saved that contain our shell');
    WriteLn('* 0 Is command parameter to do job for delphi, there is the list : ');
    WriteLn('  - 0 : do job for delphi');
    WriteLn('  - 1 : do job for python');
    WriteLn('  - 2 : do job for C');
    WriteLn('  - 3 : do job for java');
    WriteLn('* 15 is the shell range you can do whatever you want');
    WriteLn('To show this help please use command /h');
    Readln;
  end;
  ExitProcess(0);
  
end.
